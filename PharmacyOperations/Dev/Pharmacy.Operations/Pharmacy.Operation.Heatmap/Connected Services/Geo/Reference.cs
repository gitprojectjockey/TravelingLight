//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geo
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderGeoDataPoint", Namespace="http://schemas.datacontract.org/2004/07/Pharmacy.Operation.GeoDataService")]
    public partial class OrderGeoDataPoint : object
    {
        
        private decimal LatitudeField;
        
        private decimal LongitudeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitude
        {
            get
            {
                return this.LatitudeField;
            }
            set
            {
                this.LatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longitude
        {
            get
            {
                return this.LongitudeField;
            }
            set
            {
                this.LongitudeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Pharmacy.Operation.GeoDataService")]
    public partial class DataServiceFault : object
    {
        
        private string FaultDescriptionField;
        
        private string FaultMessageField;
        
        private bool ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultDescription
        {
            get
            {
                return this.FaultDescriptionField;
            }
            set
            {
                this.FaultDescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultMessage
        {
            get
            {
                return this.FaultMessageField;
            }
            set
            {
                this.FaultMessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result
        {
            get
            {
                return this.ResultField;
            }
            set
            {
                this.ResultField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Geo.IGeoService")]
    public interface IGeoService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetOrderDataPoints", ReplyAction="http://tempuri.org/IGeoService/GetOrderDataPointsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Geo.DataServiceFault), Action="http://tempuri.org/IGeoService/GetOrderDataPointsDataServiceFaultFault", Name="DataServiceFault", Namespace="http://schemas.datacontract.org/2004/07/Pharmacy.Operation.GeoDataService")]
        System.Threading.Tasks.Task<Geo.OrderGeoDataPoint[]> GetOrderDataPointsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/KnockKnock", ReplyAction="http://tempuri.org/IGeoService/KnockKnockResponse")]
        System.Threading.Tasks.Task<string> KnockKnockAsync(string whoIsThere);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface IGeoServiceChannel : Geo.IGeoService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class GeoServiceClient : System.ServiceModel.ClientBase<Geo.IGeoService>, Geo.IGeoService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GeoServiceClient() : 
                base(GeoServiceClient.GetDefaultBinding(), GeoServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_IGeoService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeoServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(GeoServiceClient.GetBindingForEndpoint(endpointConfiguration), GeoServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeoServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GeoServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeoServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GeoServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GeoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<Geo.OrderGeoDataPoint[]> GetOrderDataPointsAsync()
        {
            return base.Channel.GetOrderDataPointsAsync();
        }
        
        public System.Threading.Tasks.Task<string> KnockKnockAsync(string whoIsThere)
        {
            return base.Channel.KnockKnockAsync(whoIsThere);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IGeoService))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IGeoService))
            {
                return new System.ServiceModel.EndpointAddress(new System.Uri("http://localhost:57586/GeoService.svc"), new System.ServiceModel.DnsEndpointIdentity("localhost"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return GeoServiceClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_IGeoService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return GeoServiceClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_IGeoService);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_IGeoService,
        }
    }
}
